
//#include "compute_shaders/ClassicNoise2D.hlsl"
//#include "compute_shaders/SimplexNoise2D.hlsl"

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain


//common
float wglnoise_mod(float x, float y)
{
    return x - y * floor(x / y);
}

float2 wglnoise_mod(float2 x, float2 y)
{
    return x - y * floor(x / y);
}

float3 wglnoise_mod(float3 x, float3 y)
{
    return x - y * floor(x / y);
}

float4 wglnoise_mod(float4 x, float4 y)
{
    return x - y * floor(x / y);
}

float2 wglnoise_fade(float2 t)
{
    return t * t * t * (t * (t * 6 - 15) + 10);
}

float3 wglnoise_fade(float3 t)
{
    return t * t * t * (t * (t * 6 - 15) + 10);
}

float wglnoise_mod289(float x)
{
    return x - floor(x / 289) * 289;
}

float2 wglnoise_mod289(float2 x)
{
    return x - floor(x / 289) * 289;
}

float3 wglnoise_mod289(float3 x)
{
    return x - floor(x / 289) * 289;
}

float4 wglnoise_mod289(float4 x)
{
    return x - floor(x / 289) * 289;
}

float3 wglnoise_permute(float3 x)
{
    return wglnoise_mod289((x * 34 + 1) * x);
}

float4 wglnoise_permute(float4 x)
{
    return wglnoise_mod289((x * 34 + 1) * x);
}



//perlin
float3 SimplexNoiseGrad(float2 v)
{
    const float C1 = (3 - sqrt(3)) / 6;
    const float C2 = (sqrt(3) - 1) / 2;

    // First corner
    float2 i  = floor(v + dot(v, C2));
    float2 x0 = v -   i + dot(i, C1);

    // Other corners
    float2 i1 = x0.x > x0.y ? float2(1, 0) : float2(0, 1);
    float2 x1 = x0 + C1 - i1;
    float2 x2 = x0 + C1 * 2 - 1;

    // Permutations
    i = wglnoise_mod289(i); // Avoid truncation effects in permutation
    float3 p = wglnoise_permute(    i.y + float3(0, i1.y, 1));
           p = wglnoise_permute(p + i.x + float3(0, i1.x, 1));

    // Gradients: 41 points uniformly over a unit circle.
    // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)
    float3 phi = p / 41 * 3.14159265359 * 2;
    float2 g0 = float2(cos(phi.x), sin(phi.x));
    float2 g1 = float2(cos(phi.y), sin(phi.y));
    float2 g2 = float2(cos(phi.z), sin(phi.z));

    // Compute noise and gradient at P
    float3 m  = float3(dot(x0, x0), dot(x1, x1), dot(x2, x2));
    float3 px = float3(dot(g0, x0), dot(g1, x1), dot(g2, x2));

    m = max(0.5 - m, 0);
    float3 m3 = m * m * m;
    float3 m4 = m * m3;

    float3 temp = -8 * m3 * px;
    float2 grad = m4.x * g0 + temp.x * x0 +
                  m4.y * g1 + temp.y * x1 +
                  m4.z * g2 + temp.z * x2;

    return 99.2 * float3(grad, dot(m4, px));
}

float SimplexNoise(float2 v)
{
    return SimplexNoiseGrad(v).z;
}

//classic
float ClassicNoise_impl(float2 pi0, float2 pf0, float2 pi1, float2 pf1)
{
    pi0 = wglnoise_mod289(pi0); // To avoid truncation effects in permutation
    pi1 = wglnoise_mod289(pi1);

    float4 ix = float2(pi0.x, pi1.x).xyxy;
    float4 iy = float2(pi0.y, pi1.y).xxyy;
    float4 fx = float2(pf0.x, pf1.x).xyxy;
    float4 fy = float2(pf0.y, pf1.y).xxyy;

    float4 i = wglnoise_permute(wglnoise_permute(ix) + iy);

    float4 phi = i / 41 * 3.14159265359 * 2;
    float2 g00 = float2(cos(phi.x), sin(phi.x));
    float2 g10 = float2(cos(phi.y), sin(phi.y));
    float2 g01 = float2(cos(phi.z), sin(phi.z));
    float2 g11 = float2(cos(phi.w), sin(phi.w));

    float n00 = dot(g00, float2(fx.x, fy.x));
    float n10 = dot(g10, float2(fx.y, fy.y));
    float n01 = dot(g01, float2(fx.z, fy.z));
    float n11 = dot(g11, float2(fx.w, fy.w));

    float2 fade_xy = wglnoise_fade(pf0);
    float2 n_x = lerp(float2(n00, n01), float2(n10, n11), fade_xy.x);
    float n_xy = lerp(n_x.x, n_x.y, fade_xy.y);
    return 1.44 * n_xy;
}

// Classic Perlin noise
float ClassicNoise(float2 p)
{
    float2 i = floor(p);
    float2 f = frac(p);
    return ClassicNoise_impl(i, f, i + 1, f - 1);
}

// Classic Perlin noise, periodic variant
float PeriodicNoise(float2 p, float2 rep)
{
    float2 i0 = wglnoise_mod(floor(p), rep);
    float2 i1 = wglnoise_mod(i0 + 1, rep);
    float2 f = frac(p);
    return ClassicNoise_impl(i0, f, i1, f - 1);
}   

float RidgedMulti(float2 p)
{
    float val = ClassicNoise(p);
    // val = abs(2.0f*(val-0.5f));
    val = abs(val);
    val = 1.0f-val;
    return val;
}

//fbm noise
float random (float2 st) {
    return frac(sin(dot(st.xy,
                         float2(12.9898,78.233)))*
        43758.5453123);
}

float noise (float2 st) {
    float2 i = floor(st);
    float2 f = frac(st);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + float2(1.0, 0.0));
    float c = random(i + float2(0.0, 1.0));
    float d = random(i + float2(1.0, 1.0));

    float2 u = f * f * (3.0 - 2.0 * f);

    return lerp(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

#define OCTAVES 6
float fbm (float2 st, float amp, float freq) {
    // Initial values
    float value = 0.0;
    // float amplitude = .5;
    // float frequency = 0.;
    //
    // Loop of octaves
    for (int i = 0; i < OCTAVES; i++) {
        value += amp * noise(st);
        st *= 2.;
        amp *= .5;
    }
    return value;
}

float Gradient(float2 p)
{
    float pos = 1.0f - p.y;
    if (pos < 0.0f) {return 0.0f;}
    if (pos > 1.0f) {return 1.0f;}
    else
    return pos;
}

float SetupLowgrounds(float2 p, float2 rp)
{
    //float2 NoiseScale = float2(1.0f,1.0f);
    float g = fbm(p, 0.5, 0.0);
    float val = Gradient(float2(p.x, p.y + g));
    return val;
}

float SetupCaves(float2 p, float2 rp)
{
    float grad = Gradient(rp*0.12f);
    // float xtunnels = SimplexNoise(float2(rp.x*0.2f, rp.y*2.2f)) + 0.1f;
    // float ytunnels = fbm(float2(rp.x*2.0f, rp.y*1.0f), 0.6, 0.0) + 0.1f;
    float perturb_tunnels = fbm(p, 1.0, 0.0);
    float tunnels = RidgedMulti(float2(p.x*1.0f+perturb_tunnels, p.y*1.5f)) - 0.2f;
    float holes = SimplexNoise(float2(p.x+perturb_tunnels, p.y));

    // xtunnels = xtunnels * grad;
    // ytunnels = ytunnels * (1.0f-grad);
    tunnels = tunnels * 0.7f * Gradient(rp*0.015f);
    holes = holes * grad;

    float val = max(tunnels, holes);
    // float val = max(max(holes,xtunnels), ytunnels);

    return val;
}

float Setup(float2 p, float2 rp)
{
    float ground = SetupLowgrounds(p, rp);
    float cave = SetupCaves(p, rp);
    //float val = ground*cave;
    if (ground > 0.5f && cave < 0.5f)
        return 1.0f;
    else
        return 0.0f;
}
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

float resolution;
float2 scale;
float2 offset;
float2 current_chunk;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float x = (id.x / resolution + offset.x + current_chunk.x) * scale.x;
    float y = (id.y / resolution + offset.y + current_chunk.y) * scale.y;

    float rpx = (id.x / resolution + current_chunk.x) * scale.x;
    float rpy = (id.y / resolution + current_chunk.y) * scale.y;

    float r = Setup(float2(x,y), float2(rpx,rpy));
    Result[id.xy] = float4(r, r, r, r);
}